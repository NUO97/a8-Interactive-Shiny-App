shiny::runApp('Info498F/lecture-15-exercises/exercise-2')
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
plot_ly(dataset,
type = "scatter")
}
build_graph(iris)
df <- iris
df <- iris
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 10), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 10), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
mode='markers',
marker = list(
opacity = .4,
size = 100
)) %>%
layout(xaxis = list(range = c(0, 10), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
return()
}
build_graph(iris, 'versicolor')
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 10), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
return()
}
build_graph(iris, "versicolor")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
return()
}
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
add_trace(x = Petal.Length,
y = Petal.Width
) %>%
return()
}
build_graph(iris, 'setosa')
build_graph(iris, "virginica")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width")
) %>%
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter Plot of Iris"
) %>%
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, 'setosa')
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
#group_by(eval(parse(text = 'species'))) %>%
#summarise(ave_sepal_length = mean(Sepal.Length),
#ave_sepal_width = mean(Sepal.Width),
#ave_petal_length = mean(Petal.Length),
#ave_petal_width = mean(Petal.Width))
dataset %>%
plot_ly(x = Sepal.Length,
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris"
) %>%
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
shiny::runApp('Info498F/a8-Interactive-Shiny-App')
setwd('C:/Users/chenn/Documents/Info498F/a8-Interactive-Shiny-App/scripts')
library(shiny)
library(plotly)
build_graph(iris, setosa)
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = 1,
size = 10
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset and a species name as parameters and plots a graph
build_graph <- function(df, species = 'setosa') {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = .55,
size = 10
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, "setosa")
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset, a species name and opacity as parameters and plots a graph
build_graph <- function(df, species = 'setosa', opacity_num = 50) {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = opacity_num/100,
size = 10
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset, a species name, opacity and size as parameters and plots a graph
build_graph <- function(df, species = 'setosa', opacity_num = 50) {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = opacity_num/100,
size = 50
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset, a species name, opacity and size as parameters and plots a graph
build_graph <- function(df, species = 'setosa', opacity_num = 50) {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = opacity_num/100,
size = 20
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset, a species name, opacity and size as parameters and plots a graph
build_graph <- function(df, species = 'setosa', opacity_num = 50) {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = opacity_num/100,
size = 1
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
build_graph(iris, "setosa")
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset, a species name, opacity and size as parameters and plots a graph
build_graph <- function(df, species = 'setosa', opacity_num = 50) {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = opacity_num/100,
size = 10
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
10+5
# Require Packages
library(dplyr)
library(plotly)
# Create a function that takes in a dataset, a species name, opacity and size as parameters and plots a graph
build_graph <- function(df, species = 'setosa', opacity_num = 50, size_num = 10) {
dataset <- df %>%
filter(Species == eval(parse(text = 'species')))
dataset %>%
plot_ly(x = Sepal.Length, # Plot Sepal width and length
y = Sepal.Width,
name = "Sepal",
mode='markers',
marker = list(
opacity = opacity_num/100,
size = size_num + 10
)) %>%
# Set the layout
layout(xaxis = list(range = c(0, 8), title = "Length"),
yaxis = list(range = c(0, 5), title = "Width"),
title = "Scatter plot of Iris" # Add a title for the graph
) %>%
# Add trace for the petal
add_trace(x = Petal.Length,
y = Petal.Width,
name = "Petal"
) %>%
return()
}
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
shiny::runApp('~/Info498F/a8-Interactive-Shiny-App')
